//
//  ResponseEntityGenerator.swift
//  jsonschema2swift
//
//  Created by hayato.iida on 2016/08/29.
//  Copyright © 2016年 hayato.iida. All rights reserved.
//

import Foundation

class ResponseEntityGenerator {

  let rootSchema: Schema
  let name: String
  let schema: TargetSchema

  init(rootSchema: Schema, name: String, schema: TargetSchema) {
    self.rootSchema = rootSchema
    self.name = name
    self.schema = schema
  }

  func generate() -> String {
    return topDocComment ++
           importCode ++
           declareCode ++
           parametersCode ++
           mappingBaseCode ++
           serializedCodeBlock ++
           bottomCode ++
           ""
  }

  var topDocComment: String {
    get {
      return "/// \(self.schema.propertyName)\(self.schema.classSuffix).swift" ++
             "/// generated by jsonschema2swift" + n
    }
  }
  var importCode: String {
    get {
      return "import Foundation" ++
             "import SwiftyJSON" + n
    }
  }

  /// example:struct UserEntity: EntityType {
  var declareCode: String {
    get {
      return (self.schema.title != nil ? "/// \(self.schema.title!)" : "") +
             (self.schema.description != nil ? n + "///" ++  "/// \(self.schema.description!)"  : "") ++
             "public struct \(self.schema.propertyName)\(self.schema.classSuffix): ResponseEntityType {" + n
    }
  }


  var parametersCode: String {
    get {
      if self.schema.isArray {
        return parametersCodeDoc ++
               "  var data: [\(self.schema.propertyName)Entity]?" + n
      } else {
        return parametersCodeDoc ++
               "  var data: \(self.schema.propertyName)Entity?" + n

      }
    }
  }

  var parametersCodeDoc: String {
    return self.schema.description != nil ?  "  /// \(self.schema.description!)" : ""
  }

  var mappingBaseCode: String {
    get {
      return "" +
             "  public init?(json: JSON) {" ++
             "    guard !json.isEmpty else {" ++
             "      return nil" ++
             "    }" ++
             mappingCode +
             "  }"
    }
  }
  var mappingCode: String {
    get {
      if self.schema.isArray {
        return "    self.data = json[\"data\"].arrayValue.map { \(self.schema.propertyName)Entity(json: $0)! } as [\(self.schema.propertyName)Entity]?" + n
      } else {
        return "    self.data = \(self.schema.propertyName)Entity(json: json[\"data\"]) as \(self.schema.propertyName)Entity?" + n
      }
    }
  }
  var serializedCodeBlock: String {
    get {
      return "" ++
             "  var serialized: [String: Any] {" ++
             "    var param: [String: Any] = [:]" ++
      "    param[\"data\"] = data?.serialized" ++
      "    return param" ++
      "  }"
    }
  }
  var serializedCode: String {
    get {
      return  self.schema.properties!.map {
        $1.serializedCode($0, required: self.schema.required.contains($0))
      }.reduce("") {
        $0 + $1
      }
    }
  }
  var bottomCode: String {
    get {
      return "}"
    }
  }

}


extension TargetSchema {

  func typeCode(_ propertyName: String = "") -> String {
    return self.propertyName + self.classSuffix
  }


  var isArray: Bool {
    return self.title == nil
  }

  var propertyName: String {
    if let title = self.title {
      return title.snake2Camel
    } else {
      return self.items!.title!.snake2Camel
    }
  }

  var classSuffix: String {
    if isArray {
      return "ResponsesEntity"
    } else {
      return "ResponseEntity"
    }

  }
}
