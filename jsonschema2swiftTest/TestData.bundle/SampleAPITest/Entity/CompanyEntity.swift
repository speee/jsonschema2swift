/// CompanyEntity.swift
/// generated by jsonschema2swift

import Foundation
import SwiftyJSON


/// company
///
/// 会社
public struct CompanyEntity: SingleEntityType {

  /// 会社の種類
  public enum CompanyType: Int {
    case kabushiki = 1
    case goudou = 2
    case goumei = 3
    case goushi = 4
  }

  /// 会社名
  public var name: String
  /// 会社ID
  public var id: Int
  /// 住所
  public var address: String
  /// 電話番号
  /// - pattern: ^[0-9]{2,5}-?[0-9]{1,4}-?[0-9]{4}$
  public var tel: String?
  /// 上場企業かどうか
  public var listedFlag: Bool?
  /// 会社の種類
  public var companyType: CompanyEntity.CompanyType?
  /// 会社URL
  public var url: String?

  public init(name: String, id: Int, address: String, tel: String? = nil, listedFlag: Bool? = nil, companyType: CompanyEntity.CompanyType? = nil, url: String? = nil) {
    self.name = name
    self.id = id
    self.address = address
    self.tel = tel
    self.listedFlag = listedFlag
    self.companyType = companyType
    self.url = url
  }

  public init?(json: JSON) {
    if json.isEmpty {
      return nil
    }
    self.name = json["name"].string!
    self.id = json["id"].int!
    self.address = json["address"].string!
    self.tel = json["tel"].string
    self.listedFlag = json["listed_flag"].bool
    self.companyType = CompanyEntity.CompanyType(rawValue: json["company_type"].int!)
    self.url = json["url"].string
  }

  public static func ==(left: CompanyEntity, right: CompanyEntity) -> Bool {
    return left.id == right.id

  }

  var serialized: [String: Any] {
    var param: [String: Any] = [:]
    param["name"] = name.serialized
    param["id"] = id.serialized
    param["address"] = address.serialized
    param["tel"] = tel?.serialized
    param["listed_flag"] = listedFlag?.serialized
    param["company_type"] = companyType?.serialized
    param["url"] = url?.serialized
    return param
  }
}
