/// API.swift
/// generated by jsonschema2swift

import Foundation
import UIKit
import RxMoya
import RxSwift

struct API {

  /// get_users
  ///
  /// 社員一覧を取得する
  ///
  /// - href: /api/users
  /// - method: GET
  struct GetUsers: APITarget, APIProtocol {
    typealias Entity = ResponseArray<UserEntity>
    var configuration: Configuration
    /// - parameter after: 次のページのキー
    /// - parameter before: 前のページのキー
    /// - parameter companyId: 会社ID
    init(after: String?, before: String?, companyId: Int) {
      var params: [String: Any] = [:]
      params["after"] = after?.serialized
      params["before"] = before?.serialized
      params["company_id"] = companyId.serialized
      configuration = Configuration.init(
          path: "/api/users",
          method: .GET,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// create_user
  ///
  /// 社員情報を登録する
  ///
  /// - href: /api/users
  /// - method: POST
  struct CreateUser: APITarget, APIProtocol {
    typealias Entity = ResponseEntity<UserEntity>
    var configuration: Configuration
    /// - parameter name: 社員名
    /// - parameter companyId: 会社ID
    /// - parameter email: メールアドレス
    /// - parameter departments: 所属部署

    init(name: String, companyId: Int, email: String, departments: [UserDepartmentParamsEntity], profile: UserProfileParamsEntity?) {
      var params: [String: Any] = [:]
      params["name"] = name.serialized
      params["company_id"] = companyId.serialized
      params["email"] = email.serialized
      params["departments"] = departments.serialized
      params["profile"] = profile?.serialized
      configuration = Configuration.init(
          path: "/api/users",
          method: .POST,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// get_user
  ///
  /// 社員情報を取得する
  ///
  /// - href: /api/users/{id}
  /// - method: GET
  struct GetUser: APITarget, APIProtocol {
    typealias Entity = ResponseEntity<UserEntity>
    var configuration: Configuration
    /// - parameter id: 社員ID
    init(id: Int) {
      let params: [String: Any] = [:]
      configuration = Configuration.init(
          path: "/api/users/\(id)",
          method: .GET,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// update_user
  ///
  /// 社員情報を更新する
  ///
  /// - href: /api/users/{id}
  /// - method: PATCH
  struct UpdateUser: APITarget, APIProtocol {
    typealias Entity = ResponseEntity<UserEntity>
    var configuration: Configuration
    /// - parameter id: 社員ID
    /// - parameter name: 社員名
    /// - parameter email: メールアドレス
    /// - parameter departments: 所属部署

    init(id: Int, name: String?, email: String?, departments: [UserDepartmentParamsEntity]?, profile: UserProfileParamsEntity?) {
      var params: [String: Any] = [:]
      params["name"] = name?.serialized
      params["email"] = email?.serialized
      params["departments"] = departments?.serialized
      params["profile"] = profile?.serialized
      configuration = Configuration.init(
          path: "/api/users/\(id)",
          method: .PATCH,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// delete_user
  ///
  /// 社員情報を削除する
  ///
  /// - href: /api/users/{id}
  /// - method: DELETE
  struct DeleteUser: APITarget, APIProtocol {
    typealias Entity = ResponseEntity<NoContentEntity>
    var configuration: Configuration
    /// - parameter id: 社員ID
    init(id: Int) {
      let params: [String: Any] = [:]
      configuration = Configuration.init(
          path: "/api/users/\(id)",
          method: .DELETE,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// search_users
  ///
  /// 社員を検索する
  ///
  /// - href: /api/users/search
  /// - method: GET
  struct SearchUsers: APITarget, APIProtocol {
    typealias Entity = ResponseArray<UserEntity>
    var configuration: Configuration
    /// - parameter departmentId: 部署ID
    /// - parameter companyId: 会社ID
    /// - parameter keyword: 検索キーワード
    /// - parameter after: 次のページのキー
    /// - parameter role: 役職名
    /// - parameter before: 前のページのキー
    init(departmentId: Int?, companyId: Int, keyword: String?, after: String?, role: Role?, before: String?) {
      var params: [String: Any] = [:]
      params["department_id"] = departmentId?.serialized
      params["company_id"] = companyId.serialized
      params["keyword"] = keyword?.serialized
      params["after"] = after?.serialized
      params["role"] = role?.serialized
      params["before"] = before?.serialized
      configuration = Configuration.init(
          path: "/api/users/search",
          method: .GET,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// get_companies
  ///
  /// 会社一覧を取得する
  ///
  /// - href: /api/companies
  /// - method: GET
  struct GetCompanies: APITarget, APIProtocol {
    typealias Entity = ResponseArray<CompanyEntity>
    var configuration: Configuration

    init() {
      let params: [String: Any] = [:]
      configuration = Configuration.init(
          path: "/api/companies",
          method: .GET,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// create_company
  ///
  /// 会社情報を登録する
  ///
  /// - href: /api/companies
  /// - method: POST
  struct CreateCompany: APITarget, APIProtocol {
    typealias Entity = ResponseEntity<CompanyEntity>
    var configuration: Configuration
    /// - parameter tel: 電話番号
    ///  ( pattern: ^[0-9]{2,5}-?[0-9]{1,4}-?[0-9]{4}$ )
    /// - parameter name: 会社名
    /// - parameter companyType: 会社の種類
    /// - parameter listedFlag: 上場企業かどうか
    /// - parameter url: 会社URL
    /// - parameter address: 住所
    init(tel: String?, name: String, companyType: CompanyType, listedFlag: Bool?, url: String?, address: String) {
      var params: [String: Any] = [:]
      params["tel"] = tel?.serialized
      params["name"] = name.serialized
      params["company_type"] = companyType.serialized
      params["listed_flag"] = listedFlag?.serialized
      params["url"] = url?.serialized
      params["address"] = address.serialized
      configuration = Configuration.init(
          path: "/api/companies",
          method: .POST,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// get_company
  ///
  /// 会社情報を取得する
  ///
  /// - href: /api/companies/{id}
  /// - method: GET
  struct GetCompany: APITarget, APIProtocol {
    typealias Entity = ResponseEntity<CompanyEntity>
    var configuration: Configuration
    /// - parameter id: 会社ID
    init(id: Int) {
      let params: [String: Any] = [:]
      configuration = Configuration.init(
          path: "/api/companies/\(id)",
          method: .GET,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// update_company
  ///
  /// 会社情報を更新する
  ///
  /// - href: /api/companies/{id}
  /// - method: PATCH
  struct UpdateCompany: APITarget, APIProtocol {
    typealias Entity = ResponseEntity<CompanyEntity>
    var configuration: Configuration
    /// - parameter id: 会社ID
    /// - parameter tel: 電話番号
    ///  ( pattern: ^[0-9]{2,5}-?[0-9]{1,4}-?[0-9]{4}$ )
    /// - parameter name: 会社名
    /// - parameter companyType: 会社の種類
    /// - parameter listedFlag: 上場企業かどうか
    /// - parameter url: 会社URL
    /// - parameter address: 住所
    init(id: Int, tel: String?, name: String?, companyType: CompanyType?, listedFlag: Bool?, url: String?, address: String?) {
      var params: [String: Any] = [:]
      params["tel"] = tel?.serialized
      params["name"] = name?.serialized
      params["company_type"] = companyType?.serialized
      params["listed_flag"] = listedFlag?.serialized
      params["url"] = url?.serialized
      params["address"] = address?.serialized
      configuration = Configuration.init(
          path: "/api/companies/\(id)",
          method: .PATCH,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// delete_company
  ///
  /// 会社情報を削除する
  ///
  /// - href: /api/companies/{id}
  /// - method: DELETE
  struct DeleteCompany: APITarget, APIProtocol {
    typealias Entity = ResponseEntity<NoContentEntity>
    var configuration: Configuration
    /// - parameter id: 会社ID
    init(id: Int) {
      let params: [String: Any] = [:]
      configuration = Configuration.init(
          path: "/api/companies/\(id)",
          method: .DELETE,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// search_company_departments
  ///
  /// 会社の部署一覧を取得する
  ///
  /// - href: /api/companies/{id}/departments
  /// - method: GET
  struct SearchCompanyDepartments: APITarget, APIProtocol {
    typealias Entity = ResponseArray<DepartmentEntity>
    var configuration: Configuration
    /// - parameter id: 会社ID
    init(id: Int) {
      let params: [String: Any] = [:]
      configuration = Configuration.init(
          path: "/api/companies/\(id)/departments",
          method: .GET,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// search_company_department_users
  ///
  /// 会社の部署に所属する社員一覧を取得する
  ///
  /// - href: /api/companies/{id}/departments/{id}/users
  /// - method: GET
  struct SearchCompanyDepartmentUsers: APITarget, APIProtocol {
    typealias Entity = ResponseArray<UserEntity>
    var configuration: Configuration
    /// - parameter id: 部署ID
    init(id: Int) {
      let params: [String: Any] = [:]
      configuration = Configuration.init(
          path: "/api/companies/\(id)/departments/\(id)/users",
          method: .GET,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

  /// search_company_clubs
  ///
  /// 会社の部署に所属する社員一覧を取得する
  ///
  /// - href: /api/companies/{id}/clubs
  /// - method: GET
  struct SearchCompanyClubs: APITarget, APIProtocol {
    typealias Entity = ResponseArray<CompanyClubEntity>
    var configuration: Configuration
    /// - parameter id: 会社ID
    init(id: Int) {
      let params: [String: Any] = [:]
      configuration = Configuration.init(
          path: "/api/companies/\(id)/clubs",
          method: .GET,
          parameters: params,
          sampleDataString: ""
      )
    }
  }

}
